Steps to add a function to the catalogs
========================================

The steps listed below should be followed if a new function needs to be added 
to the catalog. For instance, if we want to add a new function, fn_sql(),
that will expose the backend function, fn_be() as a built_in function,
the following steps are needed.

1. Get an unused OID by running the script unused_oids located in
   cdb-pg/src/include/catalog/unused_oids. Claim an unused OID. For eg, for our
   example we are claiming 5075.

2. Add the new function definition in cdb-pg/src/include/catalog/pg_proc.sql.
   An example function definition: 
   	CREATE FUNCTION fn_sql(int4, int4) RETURNS bool LANGUAGE 
  		internal VOLATILE NO SQL AS 'fn_be' 
		WITH (OID=5075, DESCRIPTION="Description of the function");

3. Run the following command in cdb-pg/src/include/catalog:

   $ perl catullus.pl -procdef pg_proc.sql -prochdr pg_proc_gp.h

  catullus.pl will re-generate the pg_proc_gp.h file with the appropriate
  DATA statement for the fn_sql function definition.

  For more information on catullus.pl, please refer to 
  cdb-pg/src/include/catalog/README.tidycat.

4. Since the catalogs are being modified, the catalog number in
   cdb-pg/src/include/catalog/catversion.h should be bumped up. This is to 
   indicate an initdb is required so the version number in the backend matches
   the version number on disk.
 
   Since catversion is bumped up, we have to regenerate the catalog json file,
   gpMgmt/bin/gppylib/data/X.X.json. Otherwise, catversion test would fail.

   $ perl tidycat.pl -dd foo.json -df json *.h

   After tidycat.pl generates foo.json, rename it with the major release version 
   and move it to gpMgmt/bin/gppylib/data/


5. Adding a new function to the catalog has an impact on upgrade. Add a new
   entry to the appropriate upgrade script. For instance if the new function 
   was being added in 4.2, modify the 
   cdb-pg/src/test/regress/data/upgrade42/upg2_catupgrade_42.sql.in
   script and add the following SQL to add the function, fn_sql, under
   the schema, pg_catalog, to it: 

   	CREATE FUNCTION @gpupgradeschemaname@.fn_sql(int4, int4) 
		RETURNS bool LANGUAGE internal IMMUTABLE STRICT 
		AS 'fn_be' WITH (OID=5075);
	COMMENT ON FUNCTION @gpupgradeschemaname@.fn_sql(int4, int4) 
		IS 'Description of the function';

6. Run make distclean, make, gpinitsystem and you should be able to see your
   newly added function in pg_proc.

7. Make sure you run and possibly repair the upgrade regression test in
   install-check.

8. Don't forget to "git add" and commit the generated file, pg_proc_gp.h,
   along with any modified files.
