create table test_greatest (a integer, b integer);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into test_greatest select a, a%25 from generate_series(1,100) a;
select greatest(a,b) from test_greatest;
 greatest 
----------
        1
        2
       13
       14
       15
       16
       17
       28
       29
       30
       31
       33
       34
       35
       36
       37
       48
       49
       50
       51
       52
       63
       68
       69
       70
       71
       72
       83
       84
       85
       86
        3
        4
        5
        6
        7
       18
       19
       20
       21
       22
       38
       39
       40
       41
       42
       53
       54
       55
       56
       57
       73
       74
       75
       76
       77
       87
       88
       89
       90
       91
       96
       97
        8
        9
       10
       11
       12
       23
       24
       25
       26
       27
       32
       43
       44
       45
       46
       47
       58
       59
       60
       61
       62
       64
       65
       66
       67
       78
       79
       80
       81
       82
       92
       93
       94
       95
       98
       99
      100
(100 rows)

SELECT round(4, 0);
 round 
-------
     4
(1 row)

CREATE or REPLACE FUNCTION sales_tax(subtotal real, OUT tax real) AS $$
                                                BEGIN
                                                    tax := subtotal * 0.06;
                                                END;
                                                $$ LANGUAGE plpgsql NO SQL;
select sales_tax(30);
 sales_tax 
-----------
       1.8
(1 row)

-- Test DDL executed dynamically in a function
create function bad_ddl() returns void as $body$
        begin
                 execute 'create table junk_table(a int)';
                 execute 'drop table junk_table';
         end;
$body$ language plpgsql volatile MODIFIES SQL DATA;
select bad_ddl();
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CONTEXT:  SQL statement "create table junk_table(a int)"
PL/pgSQL function "bad_ddl" line 2 at execute statement
 bad_ddl 
---------
 
(1 row)

